SELECT VERSION();

CREATE DATABASE IF NOT EXISTS `ORDER-DIRECTORY` ;
USE `ORDER-DIRECTORY`;

CREATE TABLE IF NOT EXISTS SUPPLIER (
    SUPP_ID INT PRIMARY KEY,
    SUPP_NAME VARCHAR(50) NOT NULL,
    SUPP_CITY VARCHAR(50) NOT NULL,
    SUPP_PHONE VARCHAR(50) NOT NULL
);

CREATE TABLE IF NOT EXISTS CUSTOMER (
    CUS_ID INT NOT NULL,
    CUS_NAME VARCHAR(20) NOT NULL,
    CUS_PHONE VARCHAR(10) NOT NULL,
    CUS_CITY VARCHAR(30) NOT NULL,
    CUS_GENDER CHAR,
    PRIMARY KEY (CUS_ID)
);

CREATE TABLE IF NOT EXISTS CATEGORY (
    CAT_ID INT NOT NULL,
    CAT_NAME VARCHAR(20) NOT NULL,
    PRIMARY KEY (CAT_ID)
);

CREATE TABLE IF NOT EXISTS PRODUCT (
    PRO_ID INT NOT NULL,
    PRO_NAME VARCHAR(20) NOT NULL DEFAULT 'DUMMY',
    PRO_DESC VARCHAR(60),
    CAT_ID INT NOT NULL,
    PRIMARY KEY (PRO_ID),
    FOREIGN KEY (CAT_ID)
        REFERENCES CATEGORY (CAT_ID)
);

CREATE TABLE IF NOT EXISTS SUPPLIER_PRICING (
    PRICING_ID INT NOT NULL,
    PRO_ID INT NOT NULL,
    SUPP_ID INT NOT NULL,
    SUPP_PRICE INT DEFAULT 0,
    FOREIGN KEY (PRO_ID)
        REFERENCES PRODUCT (PRO_ID),
    FOREIGN KEY (SUPP_ID)
        REFERENCES SUPPLIER (SUPP_ID),
    PRIMARY KEY (PRICING_ID)
);

CREATE TABLE IF NOT EXISTS `ORDER` (
    ORD_ID INT NOT NULL,
    ORD_AMOUNT INT NOT NULL,
    ORD_DATE DATE NOT NULL,
    CUS_ID INT NOT NULL,
    PRICING_ID INT NOT NULL,
    PRIMARY KEY (ORD_ID),
    FOREIGN KEY (CUS_ID)
        REFERENCES CUSTOMER (CUS_ID),
    FOREIGN KEY (PRICING_ID)
        REFERENCES SUPPLIER_PRICING (PRICING_ID)
);

CREATE TABLE IF NOT EXISTS RATING (
    RAT_ID INT NOT NULL,
    ORD_ID INT NOT NULL,
    RAT_RATSTARS INT NOT NULL,
    PRIMARY KEY (RAT_ID),
    FOREIGN KEY (ORD_ID)
        REFERENCES `ORDER` (ORD_ID)
);

INSERT INTO SUPPLIER VALUES(1,"RAJESH RETAILS","DELHI",'1234567890');
INSERT INTO SUPPLIER VALUES(2,"APPARIO LTD.","MUMBAI",'2589631470');
INSERT INTO SUPPLIER VALUES(3,"KNOME PRODUCTS","BANGLORE",'9785462315');
INSERT INTO SUPPLIER VALUES(4,"BANSAL RETAILS","KOCHI",'8975463285');
INSERT INTO SUPPLIER VALUES(5,"MITTAL LTD.","LUCKNOW",'7898456532');

INSERT INTO CUSTOMER VALUES(1,"AAKASH",'9999999999',"DELHI",'M');
INSERT INTO CUSTOMER VALUES(2,"AMAN",'9785463215',"NOIDA",'M');
INSERT INTO CUSTOMER VALUES(3,"NEHA",'9999999999',"MUMBAI",'F');
INSERT INTO CUSTOMER VALUES(4,"MEGHA",'9994562399',"KOLKATA",'F');
INSERT INTO CUSTOMER VALUES(5,"PULKIT",'7895999999',"LUCKNOW",'M');

INSERT INTO CATEGORY VALUES( 1,"BOOKS");
INSERT INTO CATEGORY VALUES(2,"GAMES");
INSERT INTO CATEGORY VALUES(3,"GROCERIES");
INSERT INTO CATEGORY VALUES (4,"ELECTRONICS");
INSERT INTO CATEGORY VALUES(5,"CLOTHES");

INSERT INTO PRODUCT VALUES(1,"GTA V","WINDOWS 7 AND ABOVE WITH I5 PROCESSOR AND 8GB RAM",2);
INSERT INTO PRODUCT VALUES(2,"TSHIRT","SIZE-L WITH BLACK, BLUE AND WHITE VARIATIONS",5);
INSERT INTO PRODUCT VALUES(3,"ROG LAPTOP","WINDOWS 10 WITH 15INCH SCREEN, I7 PROCESSOR, 1TB SSD",4);
INSERT INTO PRODUCT VALUES(4,"OATS","HIGHLY NUTRITIOUS FROM NESTLE",3);
INSERT INTO PRODUCT VALUES(5,"HARRY POTTER","BEST COLLECTION OF ALL TIME BY J.K ROWLING",1);
INSERT INTO PRODUCT VALUES(6,"MILK","1L TONED MILK",3);
INSERT INTO PRODUCT VALUES(7,"BOAT EARPHONES","1.5METER LONG DOLBY ATMOS",4);
INSERT INTO PRODUCT VALUES(8,"JEANS","STRETCHABLE DENIM JEANS WITH VARIOUS SIZES AND COLOR",5);
INSERT INTO PRODUCT VALUES(9,"PROJECT IGI","COMPATIBLE WITH WINDOWS 7 AND ABOVE",2);
INSERT INTO PRODUCT VALUES(10,"HOODIE","BLACK GUCCI FOR 13 YRS AND ABOVE",5);
INSERT INTO PRODUCT VALUES(11,"RICH DAD POOR DAD","WRITTEN BY ROBERT KIYOSAKI",1);
INSERT INTO PRODUCT VALUES(12,"TRAIN YOUR BRAIN","BY SHIREEN STEPHEN",1);

INSERT INTO SUPPLIER_PRICING VALUES(1,1,2,1500);
INSERT INTO SUPPLIER_PRICING VALUES(2,3,5,30000);
INSERT INTO SUPPLIER_PRICING VALUES(3,5,1,3000);
INSERT INTO SUPPLIER_PRICING VALUES(4,2,3,2500);
INSERT INTO SUPPLIER_PRICING VALUES(5,4,1,1000);
INSERT INTO SUPPLIER_PRICING VALUES(6,12,2,780);
INSERT INTO SUPPLIER_PRICING VALUES(7,12,4,789);
INSERT INTO SUPPLIER_PRICING VALUES(8,3,1,31000);
INSERT INTO SUPPLIER_PRICING VALUES(9,1,5,1450);
INSERT INTO SUPPLIER_PRICING VALUES(10,4,2,999);
INSERT INTO SUPPLIER_PRICING VALUES(11,7,3,549);
INSERT INTO SUPPLIER_PRICING VALUES(12,7,4,529);
INSERT INTO SUPPLIER_PRICING VALUES(13,6,2,105);
INSERT INTO SUPPLIER_PRICING VALUES(14,6,1,99);
INSERT INTO SUPPLIER_PRICING VALUES(15,2,5,2999);
INSERT INTO SUPPLIER_PRICING VALUES(16,5,2,2999);

INSERT INTO `ORDER` VALUES (101,1500,"2021-10-06",2,1);
INSERT INTO `ORDER` VALUES(102,1000,"2021-10-12",3,5);
INSERT INTO `ORDER` VALUES(103,30000,"2021-09-16",5,2);
INSERT INTO `ORDER` VALUES(104,1500,"2021-10-05",1,1);
INSERT INTO `ORDER` VALUES(105,3000,"2021-08-16",4,3);
INSERT INTO `ORDER` VALUES(106,1450,"2021-08-18",1,9);
INSERT INTO `ORDER` VALUES(107,789,"2021-09-01",3,7);
INSERT INTO `ORDER` VALUES(108,780,"2021-09-07",5,6);
INSERT INTO `ORDER` VALUES(109,3000,"2021-09-10",5,3);
INSERT INTO `ORDER` VALUES(110,2500,"2021-09-10",2,4);
INSERT INTO `ORDER` VALUES(111,1000,"2021-09-15",4,5);
INSERT INTO `ORDER` VALUES(112,789,"2021-09-16",4,7);
INSERT INTO `ORDER` VALUES(113,31000,"2021-09-16",1,8);
INSERT INTO `ORDER` VALUES(114,1000,"2021-09-16",3,5);
INSERT INTO `ORDER` VALUES(115,3000,"2021-09-16",5,3);
INSERT INTO `ORDER` VALUES(116,99,"2021-09-17",2,14);

INSERT INTO `RATING` VALUES(1,101,4);
INSERT INTO `RATING` VALUES(2,102,3);
INSERT INTO `RATING` VALUES(3,103,1);
INSERT INTO `RATING` VALUES(4,104,2);
INSERT INTO `RATING` VALUES(5,105,4);
INSERT INTO `RATING` VALUES(6,106,3);
INSERT INTO `RATING` VALUES(7,107,4);
INSERT INTO `RATING` VALUES(8,108,4);
INSERT INTO `RATING` VALUES(9,109,3);
INSERT INTO `RATING` VALUES(10,110,5);
INSERT INTO `RATING` VALUES(11,111,3);
INSERT INTO `RATING` VALUES(12,112,4);
INSERT INTO `RATING` VALUES(13,113,2);
INSERT INTO `RATING` VALUES(14,114,1);
INSERT INTO `RATING` VALUES(15,115,1);
INSERT INTO `RATING` VALUES(16,116,0);

-- 4. Display the total number of customers based on gender who have placed individual orders of worth at least Rs.3000
SELECT CUS_GENDER, COUNT(*) AS TOTAL_CUSTOMERS 
FROM CUSTOMER
WHERE CUS_ID IN (
SELECT DISTINCT
    CUS_ID
FROM
    `ORDER`
WHERE
    ORD_AMOUNT >= 3000
)
GROUP BY CUS_GENDER;

-- 5. Display all the orders along with product name ordered by a customer having Customer_Id=2 
SELECT 
    O.*, PR.PRO_NAME
FROM
    `ORDER` O,
    SUPPLIER_PRICING SP,
    PRODUCT PR
WHERE
    CUS_ID = 2
        AND O.PRICING_ID = SP.PRICING_ID
        AND SP.PRO_ID = PR.PRO_ID;

-- 6. Display the Supplier details who can supply more than one product.
SELECT 
    S.*
FROM
    SUPPLIER_PRICING SP
        INNER JOIN
    SUPPLIER S ON S.SUPP_ID = SP.SUPP_ID
GROUP BY SUPP_ID
HAVING COUNT(*) > 1;

-- 7. Find the least expensive product from each category and print the table with category id, name, product name and price of the product 
SELECT 
    MIN(SUPP_PRICE), C.CAT_ID
FROM
    CATEGORY C
        INNER JOIN
    PRODUCT P ON C.CAT_ID = P.CAT_ID
        INNER JOIN
    SUPPLIER_PRICING S ON P.PRO_ID = S.PRO_ID
GROUP BY C.CAT_ID;

-- 8. Display the Id and Name of the Product ordered after “2021-10-05”.
SELECT 
    P.PRO_ID, P.PRO_NAME, O.ORD_DATE
FROM
    `ORDER` O
        INNER JOIN
    SUPPLIER_PRICING SP ON SP.PRICING_ID = O.PRICING_ID
        INNER JOIN
    PRODUCT P ON SP.PRO_ID = P.PRO_ID
WHERE
    O.ORD_DATE > '2021-10-05';
    
 -- 9. Display customer name and gender whose names start or end with character 'A'.
SELECT 
    C.CUS_NAME, C.CUS_GENDER
FROM
    CUSTOMER C
WHERE
    CUS_NAME LIKE 'A%' OR CUS_NAME LIKE '%A';
    
/* 10. Create a stored procedure to display supplier id, name, Rating(Average rating of all the products sold by every customer) and
 Type_of_Service. For Type_of_Service, If rating =5, print “Excellent Service”,If rating >4 print “Good Service”, If rating >2 print “Average
 Service” else print “Poor Service”. Note that there should be one rating per supplier. */ 
 CREATE DEFINER=`root`@`localhost` PROCEDURE `rating_proc`()
BEGIN
 select report.supp_id, report.supp_name, report.Average,
 case
 when report.Average = 5 then 'Excellent Service'
 when report.Average > 4 then 'Good Service'
 when report.Average > 2 then 'Average Service'
 else 'Poor Service'
 end as Type_of_Service	from
 (select final.supp_id, s.supp_name, final.Average from  
 (select test2.supp_id, sum(test2.rat_ratstars)/count(test2.rat_ratstars) as Average from 
 (select sp.supp_id, test.ord_id, test.rat_ratstars from supplier_pricing sp inner join
 (select o.pricing_id, r.ord_id, r.rat_ratstars from `order` o inner join rating r on r.ord_id = o.ord_id) as test 
 on test.pricing_id = sp.pricing_id)
 as test2 group by test2.supp_id order by test2.supp_id)
 as final inner join supplier s where final.supp_id = s.supp_id) as report;
 
END
call rating_proc();
